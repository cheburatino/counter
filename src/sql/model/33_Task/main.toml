docType = "Task"
tableComment = "задача"

tableName ="task"

fields = [
	{name="id",			type="serial"},
	{name="title",					type="char",	size=150, 	ext="not null",	 comment="название"},
	{name="type_id",					type="int",	 comment="тип задачи"},
	{name="state_id",					type="int", 	ext=" default 1",	 comment="статус"},
	{name="description",					type="text",	 comment="описание"},
	{name="files",					type="jsonb",	 comment="файлы"},
	{name="images",					type="jsonb",	 comment="изображения"},
	{name="customer_id",					type="int",	 comment="заказчик"},
	{name="request_id",					type="int",	 comment="запрос"},
	{name="system_id",					type="int",	 comment="система"},
	{name="digital_solution_id",					type="int",	 comment="цифровое решение"},
	{name="functional_requirement_id",					type="int",	 comment="функциональное требование"},
	{name="bug_id",					type="int",	 comment="баг"},
	{name="plan_start_date",					type="timestamp",	 comment="плановая дата начала"},
	{name="plan_end_date",					type="timestamp",	 comment="плановая дата завершения"},
	{name="result",					type="text",	 comment="результат"},
	{name="search_text",			type="text",	comment="колонка для поиска"},
	{name="options",				type="jsonb",	comment="разные дополнительные параметры"},
	{name="created_at",				type="timestamp",	ext="with time zone"},
	{name="updated_at",				type="timestamp",	ext="with time zone"},
	{name="deleted",				type="bool",	ext="not null default false"}
]

fkConstraints = [
	{name="task_title_already_exist", ext="UNIQUE (title)"},
	{fld="type_id", ref="ctlg_task_type", fk="id"},
	{fld="state_id", ref="ctlg_task_state", fk="id"},
	{fld="customer_id", ref="company", fk="id"},
	{fld="request_id", ref="request", fk="id"},
	{fld="system_id", ref="system", fk="id"},
	{fld="digital_solution_id", ref="digital_solution", fk="id"},
	{fld="functional_requirement_id", ref="functional_requirement", fk="id"},
	{fld="bug_id", ref="bug", fk="id"}
]

triggers = [
	{name="task_created", when="before insert or update", ref="for each row", funcName="builtin_fld_update"},
	{name="task_trigger_before", when="before insert or update", ref="for each row", funcName="task_trigger_before"},
	{name="task_trigger_after", when="after insert or update", ref="for each row", funcName="task_trigger_after"}
]



methods = [
	"task_get_specialist",
	"task_get_specialist_role",
	"task_list",
	"task_update",
	"task_get_by_id",
	"task_trigger_before",
	"task_trigger_after"
]

alterScripts = [
	"alter table task add column if not exists title CHARACTER VARYING(150);",
	"alter table task add column if not exists type_id int;",
	"alter table task add column if not exists state_id int;",
	"alter table task add column if not exists description text;",
	"alter table task add column if not exists files jsonb;",
	"alter table task add column if not exists images jsonb;",
	"alter table task add column if not exists customer_id int;",
	"alter table task add column if not exists request_id int;",
	"alter table task add column if not exists system_id int;",
	"alter table task add column if not exists digital_solution_id int;",
	"alter table task add column if not exists functional_requirement_id int;",
	"alter table task add column if not exists bug_id int;",
	"alter table task add column if not exists plan_start_date timestamp;",
	"alter table task add column if not exists plan_end_date timestamp;",
	"alter table task add column if not exists result text;",
	"alter table task add column if not exists search_text text;"
]